<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd">

  <!-- It register the beans in context and scan the annotations inside beans and activate them -->
  <context:component-scan base-package="com.amsoftgroup"/>

  <!-- This allow for dispatching requests to Controllers -->
  <mvc:annotation-driven/>



  <!-- This helps in mapping the logical view names to directly view files under a certain pre-configured directory -->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/WEB-INF/views/"/>
    <property name="suffix" value=".jsp"/>
  </bean>

  

  <!-- This produces a container-managed EntityManagerFactory;
       rather than application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean-->
  <bean id="entityManagerFactoryBean" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <!-- This makes /META-INF/persistence.xml is no longer necessary -->
    <property name="packagesToScan" value="com.amsoftgroup.model"/>
    <!-- JpaVendorAdapter implementation for Hibernate EntityManager.
         Exposes Hibernate's persistence provider and EntityManager extension interface -->
    <property name="jpaVendorAdapter">
      <bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter"/>
    </property>
    <property name="jpaProperties">
      <props>
        <prop key="hibernate.show_sql">true</prop>
        <prop key="hibernate.format_sql">true</prop>
        <prop key="hibernate.transaction.flush_before_completion">true</prop>
        <prop key="hibernate.cache.provider_class">org.hibernate.cache.HashtableCacheProvider"</prop>
        <prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect</prop>
      </props>
    </property>
  </bean>

  <!-- Simple implementation of the standard JDBC DataSource interface,
       configuring the plain old JDBC DriverManager via bean properties -->
  <bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
    <property name="driverClassName" value="org.postgresql.Driver"/>
    <property name="url" value="jdbc:postgresql://localhost:5432/university"/>
    <property name="username" value="postgres"/>
    <property name="password" value="postgres"/>
  </bean>

  <!-- This transaction manager is appropriate for applications that use a single JPA EntityManagerFactory for transactional data access.
      JTA (usually through JtaTransactionManager) is necessary for accessing multiple transactional resources within the same transaction. -->
  <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
    <property name="entityManagerFactory" ref="entityManagerFactoryBean"/>
  </bean>

  <bean id="multipartResolver"
        class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!-- one of the properties available; the maximum file size in bytes -->
    <property name="maxUploadSize" value="100000"/>
  </bean>

  <bean class="org.springframework.web.servlet.view.XmlViewResolver">
    <property name="order" value="0" />
    <property name="location">
      <value>/WEB-INF/pdf-config.xml</value>
    </property>
  </bean>




  <!-- responsible for registering the necessary Spring components that power annotation-driven transaction management;
       such as when @Transactional methods are invoked -->
    <mvc:resources mapping="/resources/**" location="/resources/" />
  <mvc:annotation-driven/>
  <tx:annotation-driven/>

</beans>